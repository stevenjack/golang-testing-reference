// Code generated by MockGen. DO NOT EDIT.
// Source: book.go
//
// Generated by this command:
//
//	mockgen -package repositorytest -destination=repositorytest/mocks.go -source=book.go
//
// Package repositorytest is a generated GoMock package.
package repositorytest

import (
	reflect "reflect"

	domain "github.com/stevenjack/golang-testing-reference/repository/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBookFetcher is a mock of BookFetcher interface.
type MockBookFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBookFetcherMockRecorder
}

// MockBookFetcherMockRecorder is the mock recorder for MockBookFetcher.
type MockBookFetcherMockRecorder struct {
	mock *MockBookFetcher
}

// NewMockBookFetcher creates a new mock instance.
func NewMockBookFetcher(ctrl *gomock.Controller) *MockBookFetcher {
	mock := &MockBookFetcher{ctrl: ctrl}
	mock.recorder = &MockBookFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookFetcher) EXPECT() *MockBookFetcherMockRecorder {
	return m.recorder
}

// FetchByID mocks base method.
func (m *MockBookFetcher) FetchByID(id string) (domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByID", id)
	ret0, _ := ret[0].(domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByID indicates an expected call of FetchByID.
func (mr *MockBookFetcherMockRecorder) FetchByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByID", reflect.TypeOf((*MockBookFetcher)(nil).FetchByID), id)
}
